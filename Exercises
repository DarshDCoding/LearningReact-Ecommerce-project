# Lession 6 Exercises
## 6a. In the checkout page, split up the header into a separate component called  CheckoutHeader.
    - Since CheckoutHeader is not shared (it's only used on the checkout page), save it in the pages folder insted of components folder.
    - Rename checkout-header.css to CheckoutHeader.css. Update the imports so each component imports the css file with the same name.
    //done...

## 6b. When there are multiple components for a page, we usually group them together into a folder.
    - Inside the pages folder, create a folder named checkout, and move all components and CSS related to the checkout page into this folder.
    - Update all your imports.
    //done...

## 6c. In CheckoutHeader replace all <a> element with <Link> components.
    //done...

## 6d. Save the changes form the previous exercises into git.
    - For the rest of the exercises, save changes into git after each exercise.
    //done...

## 6e. Rename header.css to Header.css so it matches the component's name. Chekcout the git section to see if git detected the change.
    - If git detected the change, save the change into git (using Commit).
    - If git did not detect the change, this happens because on some operating systems (Windows and Mac), git is case-insensitive. That means header.css and Header.css are considered the same.
    - To fix this, rename header.css to something like header2.css. Save these changes into git (using commit). Then, rename header2.css to Header.css and git will now detect the change.
    //done...

## 6f.  React Router has another component called <NavLink> that is useful for navigation links (links at the top of a page, usually in a header).
    - For an example, check apple.com and see the links at the top.
    - In Header.jsx, update all <Link>s to <NavLink>s (props are the same).
        //have done already.

    - The special feature of <NavLink> is it knows which page is loaded. For example, if you're on the Orders page, it adds a class called active to the Orders link (className="orders-link ... active").
    - Inside Header.css, style the orders link so when it's active, "Orders" is underlined (Hint: .orders-link.active will style an element with the class order-link and active. Use text-decoration:underline;)
    -Open the website, go to the orders page, and check the Orders link in the header.
    //done...

## 6g. We'll use React to change the icon in the tabs (this is called a favicon).
    - In index.html, look for <link rel="icon" href"...">. This sets the favicon. Copy this into HomePage, CheckoutPage, and OrderPage.
    - In your browser, open supersimple.dev/images/home-favicon.png and download the image into the public folder. Do the same for sueprsimple.dev/images/cart-favicon.png and supersimple.dev/images/orders-favicon.png.
    - In HomePage set the href of the favicon to home-favicon.png (if we set href to a file name, Vite will look for the file in the public folder).
    - Update CheckoutPage to use cart-favicon.png and OrdersPage to use orders-favicon.png.
    - In index.html, remove <link rel="icon" href="...">
    - Open the website and switch pages. Notice the favicon changes.
    //done...

### Challenges Exercises

## 6h. We'll move the tracking page to React (open the website, go to the orders page, and click a "Track package" button).
    - Move over the tracking page to React (open the website, go to the orders page, and click a "Track package" button).
    - Download supersimple.dev/images/tracking-favicon.png and use it as the favicon.
    - Move over the CSS, rename it to match the Component, and import.
    - Create a route for the tracking page in App.jsx (use path="tracking").
    - Open the website and test out the tracking page.
    //Already did all this except adding favicon.
    //done...

## 6i. Using the Search section of VSCode (Ctrl + Shift + F on Windows or Command + Shift + F on Mac), find any other <a> elements in the code and replace them with <Link> component.
    //done...

## 6j. Create a folder src/assets/images. Open public/images, move the 4 logos at the bottom and the icons folder to src/assets/images (We usually save logos and icons in src/assets/images, but not favicons). 
    - Using the Search seciton of VSCode, find where each logo and icon is used in the code, import the image, and insert it using src={...} insted of using a string for the src attribute.
    - (We don't do this for product images or ratings because each product can have a different image and rating. This makes importing difficult).
    //done...

## 6k. We'll add a 404 (Not Found) page. Create a page that displays the <Header> and message "Page not Found" (Style it however you want).
    - Create a <Route> with path="*" (this matches any URL path), set the element to your 404 page. Add this route to the bottom of <Routes> (if the URL does not match any other route, it will display your 404 page.)

...Everything is working fine after completing exercises...hence merging to main branch.

 
 # Lession 7 Exercises

 ## 7a. In OrdersPage.jsx, use async await to load the data insted of promise.
        //done....

## 7b. In OrderSummary.jsx, separate the cart item details into a componenet:
    - Create a new component named CartItemDetails.
    - Move <img ClassName ="product-image"> and <div className="cart-item-details"> into this new component.
    //done...

## 7c. In OrderSummary.jsx, separate the delivery-date into a component:
    -Create a new component named DeliveryDate. Move the code that finds the selectedDeliveryOption into the componenet as well.
    //done...

## 7d. We saw useEffect runs twice due to <StrictMode>. In main.jsx, temporarily remove <StrictMode> and check that useEffect runs once.
    - Running twice helps us catch bugs. (Running useEffect twice should result in the same HTML being rendered. This is called idempotency).
    - This only happens in development. In Production (the website is on the Internet). <StrictMode> doesn't do anything. Add <StrictMode> back.
    //done...

## 7e. In OrdersPage.jsx, separate the <div className= "orders-grid"> into its own component, named OrdersGrid.
    //done...

## 7f. In OrdersGrid, separate the <div className="order-header"> and <div className="order-details-grid"> into their own components.
    //OrderDetails in already done...
    //Working on OrderHeader
    //done...

## 7g. In CheckoutPage, separate the header into a component (did this in lesson 6 exercises). Pass in the cart as a prop, display the total quantity.
